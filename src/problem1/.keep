// A: Mathematical formula (O(1), fastest)
var sum_to_n_a = function(n) {
    return n * (n + 1) / 2;
};

// B: Iterative loop (O(n))
var sum_to_n_b = function(n) {
    let sum = 0;
    for (let i = 1; i <= n; i++) {
        sum += i;
    }
    return sum;
};

// C: Recursive approach (O(n), less efficient, may hit stack limit for large n)
var sum_to_n_c = function(n) {
    if (n <= 1) return n;
    return n + sum_to_n_c(n - 1);
};

// D: ES6 functional style with Array.from + reduce (O(n))
var sum_to_n_d = function(n) {
    return Array.from({ length: n }, (_, i) => i + 1)
                .reduce((acc, val) => acc + val, 0);
};